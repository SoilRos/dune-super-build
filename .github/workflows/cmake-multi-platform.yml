# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Testing scenarios

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      branch:
        type: string
        description: 'core modules tag e.g. (master | v2.9.0) [master]'
        required: true
        default: 'master'
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        toolchain: [gnu, llvm, msvc]
        include:
          - os: windows-latest
            toolchain: msvc
            c_compiler: cl
            cxx_compiler: cl
            shell: powershell
            cxx_flags: '/Zc:preprocessor'
          - os: windows-latest
            toolchain: gnu
            shell: 'msys2 {0}'
            c_compiler: gcc
            cxx_compiler: c++
            cxx_flags: ''
          - os: windows-latest
            toolchain: llvm
            shell: 'msys2 {0}'
            c_compiler: clang
            cxx_compiler: clang++
            cxx_flags: ''
          - os: ubuntu-latest
            toolchain: gnu
            c_compiler: gcc
            cxx_compiler: g++
            shell: bash
            cxx_flags: ''
          - os: ubuntu-latest
            toolchain: llvm
            c_compiler: clang
            cxx_compiler: clang++
            shell: bash
            cxx_flags: ''
          - os: macos-latest
            toolchain: llvm
            c_compiler: clang
            cxx_compiler: clang++
            shell: bash
            cxx_flags: ''
        exclude:
          - os: ubuntu-latest
            toolchain: msvc
          - os: macos-latest
            toolchain: gnu
          - os: macos-latest
            toolchain: msvc

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
    - name: Setup msys2
      if: ${{ matrix.os == 'windows-latest' && ( matrix.toolchain == 'gnu' || matrix.toolchain == 'llvm' ) }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: mingw-w64-ucrt-x86_64-${{ matrix.c_compiler }} mingw-w64-ucrt-x86_64-cmake make git mingw-w64-ucrt-x86_64-git-lfs dos2unix

    - name: Setup XCode
      if: ${{ matrix.os == 'macos-latest' }}
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - uses: actions/checkout@v4
    - uses: ashutoshvarma/setup-ninja@v1.1
    - name: Setup Ninja
      if: ${{ ! matrix.toolchain == 'mvsc' }}
      run: |
        echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
    - name: Configure CMake
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_FLAGS=${{ matrix.cxx_flags }}
        -DCMAKE_CXX_STANDARD=20
        -DBRANCH=${{ github.event.inputs.branch }}
        -DDUNE_ENABLE_PYTHONBINDINGS=OFF
        -S .

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Build Test
      run: cmake --build build --config ${{ matrix.build_type }} --target build_tests
      
    - name: Run Test
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
